// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace gymlocator.Rest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Address to the gym.
    /// </summary>
    public partial class Address
    {
        /// <summary>
        /// Initializes a new instance of the Address class.
        /// </summary>
        public Address()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Address class.
        /// </summary>
        /// <param name="streetAddress">Street name and number.</param>
        /// <param name="city">The city address.</param>
        /// <param name="postalCode">The postal address code.</param>
        /// <param name="googlePlaceID">Refers to a business unit in Google
        /// Maps</param>
        public Address(string streetAddress, string city, string postalCode = default(string), string googlePlaceID = default(string))
        {
            StreetAddress = streetAddress;
            PostalCode = postalCode;
            City = city;
            GooglePlaceID = googlePlaceID;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets street name and number.
        /// </summary>
        [JsonProperty(PropertyName = "streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Gets or sets the postal address code.
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the city address.
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets refers to a business unit in Google Maps
        /// </summary>
        [JsonProperty(PropertyName = "googlePlaceID")]
        public string GooglePlaceID { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StreetAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StreetAddress");
            }
            if (City == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "City");
            }
        }
    }
}
