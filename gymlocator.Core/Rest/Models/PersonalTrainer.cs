// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace gymlocator.Rest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A personal trainer for the gym.
    /// </summary>
    public partial class PersonalTrainer
    {
        /// <summary>
        /// Initializes a new instance of the PersonalTrainer class.
        /// </summary>
        public PersonalTrainer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PersonalTrainer class.
        /// </summary>
        /// <param name="name">Full name of the personal trainer.</param>
        /// <param name="specialities">What kind of workouts are this personal
        /// trainer's speciality. Empty array if none.</param>
        /// <param name="education">Education of the personal trainer. Empty
        /// array if none.</param>
        /// <param name="email">E-mail to the personal trainer.</param>
        /// <param name="phone">Phone number to the personal trainer.</param>
        /// <param name="presentation">Presentation of the personal
        /// trainer</param>
        public PersonalTrainer(string name, IList<string> specialities, IList<string> education, string email = default(string), string phone = default(string), string presentation = default(string), Image desktopImage = default(Image), Image mobileImage = default(Image))
        {
            Name = name;
            Email = email;
            Phone = phone;
            Presentation = presentation;
            Specialities = specialities;
            Education = education;
            DesktopImage = desktopImage;
            MobileImage = mobileImage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets full name of the personal trainer.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets e-mail to the personal trainer.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets phone number to the personal trainer.
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets presentation of the personal trainer
        /// </summary>
        [JsonProperty(PropertyName = "presentation")]
        public string Presentation { get; set; }

        /// <summary>
        /// Gets or sets what kind of workouts are this personal trainer's
        /// speciality. Empty array if none.
        /// </summary>
        [JsonProperty(PropertyName = "specialities")]
        public IList<string> Specialities { get; set; }

        /// <summary>
        /// Gets or sets education of the personal trainer. Empty array if
        /// none.
        /// </summary>
        [JsonProperty(PropertyName = "education")]
        public IList<string> Education { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "desktopImage")]
        public Image DesktopImage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mobileImage")]
        public Image MobileImage { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Specialities == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Specialities");
            }
            if (Education == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Education");
            }
            if (DesktopImage != null)
            {
                DesktopImage.Validate();
            }
            if (MobileImage != null)
            {
                MobileImage.Validate();
            }
        }
    }
}
