// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace gymlocator.Rest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This represents a Gym entity. Properties without values will be defined
    /// but null as default. Collections will never be null, but instead an
    /// empty array.
    /// </summary>
    public partial class Gym
    {
        /// <summary>
        /// Initializes a new instance of the Gym class.
        /// </summary>
        public Gym()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Gym class.
        /// </summary>
        /// <param name="id">Unique identifier for this gym. This is a human
        /// readable text string that is still unique for this gym.</param>
        /// <param name="name">Name of this gym</param>
        /// <param name="staffedHours">Times for when there are personnel at
        /// the gym. If none are specified the array will be empty.</param>
        /// <param name="features">Features available on this gym. If none are
        /// specified the array will be empty.</param>
        /// <param name="personalTrainers">Personal trainers available for this
        /// gym. If none are specified the array will be empty.</param>
        /// <param name="groupTraining">An index of what types of group
        /// training are available for this gym. The array will be empty if
        /// there are no group training types specified.</param>
        /// <param name="description">A short description of this gym.</param>
        /// <param name="businessUnitID">Unque identifier for this gym in
        /// business systems.</param>
        /// <param name="facebookPage">Link to the gym's Facebook page.</param>
        /// <param name="openingDate">A date for when this gym will open. If
        /// the value is in the past or `null` it means that the gym has
        /// already opened.</param>
        public Gym(string id, string name, Address address, ContactDetails contact, Coordinates location, IList<StaffedHour> staffedHours, IList<Feature> features, IList<PersonalTrainer> personalTrainers, IList<GroupTrainingType> groupTraining, string description = default(string), Image desktopImage = default(Image), Image mobileImage = default(Image), string businessUnitID = default(string), string facebookPage = default(string), SOSChildrensVillage sosChildrensVillage = default(SOSChildrensVillage), System.DateTime? openingDate = default(System.DateTime?))
        {
            Id = id;
            Name = name;
            Description = description;
            DesktopImage = desktopImage;
            MobileImage = mobileImage;
            BusinessUnitID = businessUnitID;
            Address = address;
            Contact = contact;
            Location = location;
            StaffedHours = staffedHours;
            Features = features;
            PersonalTrainers = personalTrainers;
            FacebookPage = facebookPage;
            SosChildrensVillage = sosChildrensVillage;
            OpeningDate = openingDate;
            GroupTraining = groupTraining;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identifier for this gym. This is a human
        /// readable text string that is still unique for this gym.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets name of this gym
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a short description of this gym.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "desktopImage")]
        public Image DesktopImage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mobileImage")]
        public Image MobileImage { get; set; }

        /// <summary>
        /// Gets or sets unque identifier for this gym in business systems.
        /// </summary>
        [JsonProperty(PropertyName = "businessUnitID")]
        public string BusinessUnitID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public Address Address { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contact")]
        public ContactDetails Contact { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Coordinates Location { get; set; }

        /// <summary>
        /// Gets or sets times for when there are personnel at the gym. If none
        /// are specified the array will be empty.
        /// </summary>
        [JsonProperty(PropertyName = "staffedHours")]
        public IList<StaffedHour> StaffedHours { get; set; }

        /// <summary>
        /// Gets or sets features available on this gym. If none are specified
        /// the array will be empty.
        /// </summary>
        [JsonProperty(PropertyName = "features")]
        public IList<Feature> Features { get; set; }

        /// <summary>
        /// Gets or sets personal trainers available for this gym. If none are
        /// specified the array will be empty.
        /// </summary>
        [JsonProperty(PropertyName = "personalTrainers")]
        public IList<PersonalTrainer> PersonalTrainers { get; set; }

        /// <summary>
        /// Gets or sets link to the gym's Facebook page.
        /// </summary>
        [JsonProperty(PropertyName = "facebookPage")]
        public string FacebookPage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sosChildrensVillage")]
        public SOSChildrensVillage SosChildrensVillage { get; set; }

        /// <summary>
        /// Gets or sets a date for when this gym will open. If the value is in
        /// the past or `null` it means that the gym has already opened.
        /// </summary>
        [JsonProperty(PropertyName = "openingDate")]
        public System.DateTime? OpeningDate { get; set; }

        /// <summary>
        /// Gets or sets an index of what types of group training are available
        /// for this gym. The array will be empty if there are no group
        /// training types specified.
        /// </summary>
        [JsonProperty(PropertyName = "groupTraining")]
        public IList<GroupTrainingType> GroupTraining { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Address == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Address");
            }
            if (Contact == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Contact");
            }
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (StaffedHours == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StaffedHours");
            }
            if (Features == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Features");
            }
            if (PersonalTrainers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PersonalTrainers");
            }
            if (GroupTraining == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GroupTraining");
            }
            if (DesktopImage != null)
            {
                DesktopImage.Validate();
            }
            if (MobileImage != null)
            {
                MobileImage.Validate();
            }
            if (Address != null)
            {
                Address.Validate();
            }
            if (Location != null)
            {
                Location.Validate();
            }
            if (StaffedHours != null)
            {
                foreach (var element in StaffedHours)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Features != null)
            {
                foreach (var element1 in Features)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (PersonalTrainers != null)
            {
                foreach (var element2 in PersonalTrainers)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (SosChildrensVillage != null)
            {
                SosChildrensVillage.Validate();
            }
            if (GroupTraining != null)
            {
                foreach (var element3 in GroupTraining)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
