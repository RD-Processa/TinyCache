// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace gymlocator.Rest
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// The Gym API is responsible for the Gym entity and its cross cut
    /// concerns. All requests for gym information should go through this API.
    /// All responses are in JSON format, and camel cased with leading
    /// lowercase.
    /// No properties are skipped. If a property is not set in the source, it
    /// will be set to null. List properties will not be null, instead they
    /// will be empty array if no value exist in source. Default value of
    /// numbers will be null, and default values of booleans will be false.
    /// Locale is required in every request. This is a case sensitive
    /// combination of language code and country code.
    /// </summary>
    public partial interface IGymAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Get all the gyms for the specified country and language.
        /// </summary>
        /// <remarks>
        /// Will get an array of gyms for the specific country in the specified
        /// language. If no gyms are found, the result will be an empty array.
        /// </remarks>
        /// <param name='locale'>
        /// Language and country specifier for the gyms you want to retrieve.
        /// The format is `{lang}-{country}`, example `/gyms/sv-se`. Note that
        /// the locale is case sensitive.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetGymsWithHttpMessagesAsync(string locale, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a specific gym by locale and ID.
        /// </summary>
        /// <remarks>
        /// Will get a specific gym by ID and country/language. If the gym is
        /// not found it will return status 404.
        /// </remarks>
        /// <param name='locale'>
        /// Language and country specifier for the gyms you want to retrieve.
        /// The format is `{lang}-{country}`, example `/gyms/sv-se`. Note that
        /// the locale is case sensitive.
        /// </param>
        /// <param name='gymID'>
        /// Unique identifier for the gym you want to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetGymWithHttpMessagesAsync(string locale, string gymID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
